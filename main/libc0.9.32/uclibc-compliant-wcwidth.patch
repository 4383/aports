--- uClibc-0.9.32.old/libc/misc/wchar/wchar.c
+++ uClibc-0.9.32.new/libc/misc/wchar/wchar.c
@@ -910,259 +910,224 @@
 /**********************************************************************/
 #ifdef L_wcswidth
 
-
-#ifdef __UCLIBC_MJN3_ONLY__
-#warning REMINDER: If we start doing translit, wcwidth and wcswidth will need updating.
-#warning TODO: Update wcwidth to match latest by Kuhn.
-#endif
-
-#if defined(__UCLIBC_HAS_LOCALE__) && \
-( defined(__CTYPE_HAS_8_BIT_LOCALES) || defined(__CTYPE_HAS_UTF_8_LOCALES) )
-
-static const unsigned char new_idx[] = {
-	0,    5,    5,    6,   10,   15,   28,   39,
-	48,   48,   71,   94,  113,  128,  139,  154,
-	175,  186,  188,  188,  188,  188,  188,  188,
-	203,  208,  208,  208,  208,  208,  208,  208,
-	208,  219,  219,  219,  222,  222,  222,  222,
-	222,  222,  222,  222,  222,  222,  222,  224,
-	224,  231,  231,  231,  231,  231,  231,  231,
-	231,  231,  231,  231,  231,  231,  231,  231,
-	231,  231,  231,  231,  231,  231,  231,  231,
-	231,  231,  231,  231,  231,  231,  231,  231,
-	231,  231,  231,  231,  231,  231,  231,  231,
-	231,  231,  231,  231,  231,  231,  231,  231,
-	231,  231,  231,  231,  231,  231,  231,  231,
-	231,  231,  231,  231,  231,  231,  231,  231,
-	231,  231,  231,  231,  231,  231,  231,  231,
-	231,  231,  231,  231,  231,  231,  231,  231,
-	231,  231,  231,  231,  231,  231,  231,  231,
-	231,  231,  231,  231,  231,  231,  231,  231,
-	231,  231,  231,  231,  231,  231,  231,  231,
-	231,  231,  231,  231,  231,  231,  231,  231,
-	231,  231,  231,  231,  231,  233,  233,  233,
-	233,  233,  233,  233,  234,  234,  234,  234,
-	234,  234,  234,  234,  234,  234,  234,  234,
-	234,  234,  234,  234,  234,  234,  234,  234,
-	234,  234,  234,  234,  234,  234,  234,  234,
-	234,  234,  234,  234,  234,  234,  234,  234,
-	234,  234,  234,  234,  234,  234,  234,  234,
-	236,  236,  236,  236,  236,  236,  236,  236,
-	236,  236,  236,  236,  236,  236,  236,  236,
-	236,  236,  236,  236,  236,  236,  236,  236,
-	236,  236,  236,  236,  236,  236,  236,  236,
-	236,  237,  237,  238,  241,  241,  242,  249,
-	255,
-};
-
-static const unsigned char new_tbl[] = {
-	0x00, 0x01, 0x20, 0x7f, 0xa0, 0x00, 0x00, 0x50,
-	0x60, 0x70, 0x00, 0x83, 0x87, 0x88, 0x8a, 0x00,
-	0x91, 0xa2, 0xa3, 0xba, 0xbb, 0xbe, 0xbf, 0xc0,
-	0xc1, 0xc3, 0xc4, 0xc5, 0x00, 0x4b, 0x56, 0x70,
-	0x71, 0xd6, 0xe5, 0xe7, 0xe9, 0xea, 0xee, 0x00,
-	0x0f, 0x10, 0x11, 0x12, 0x30, 0x4b, 0xa6, 0xb1,
-	0x00, 0x01, 0x03, 0x3c, 0x3d, 0x41, 0x49, 0x4d,
-	0x4e, 0x51, 0x55, 0x62, 0x64, 0x81, 0x82, 0xbc,
-	0xbd, 0xc1, 0xc5, 0xcd, 0xce, 0xe2, 0xe4, 0x00,
-	0x02, 0x03, 0x3c, 0x3d, 0x41, 0x43, 0x47, 0x49,
-	0x4b, 0x4e, 0x70, 0x72, 0x81, 0x83, 0xbc, 0xbd,
-	0xc1, 0xc6, 0xc7, 0xc9, 0xcd, 0xce, 0x00, 0x01,
-	0x02, 0x3c, 0x3d, 0x3f, 0x40, 0x41, 0x44, 0x4d,
-	0x4e, 0x56, 0x57, 0x82, 0x83, 0xc0, 0xc1, 0xcd,
-	0xce, 0x00, 0x3e, 0x41, 0x46, 0x49, 0x4a, 0x4e,
-	0x55, 0x57, 0xbf, 0xc0, 0xc6, 0xc7, 0xcc, 0xce,
-	0x00, 0x41, 0x44, 0x4d, 0x4e, 0xca, 0xcb, 0xd2,
-	0xd5, 0xd6, 0xd7, 0x00, 0x31, 0x32, 0x34, 0x3b,
-	0x47, 0x4f, 0xb1, 0xb2, 0xb4, 0xba, 0xbb, 0xbd,
-	0xc8, 0xce, 0x00, 0x18, 0x1a, 0x35, 0x36, 0x37,
-	0x38, 0x39, 0x3a, 0x71, 0x7f, 0x80, 0x85, 0x86,
-	0x88, 0x90, 0x98, 0x99, 0xbd, 0xc6, 0xc7, 0x00,
-	0x2d, 0x31, 0x32, 0x33, 0x36, 0x38, 0x39, 0x3a,
-	0x58, 0x5a, 0x00, 0x60, 0x00, 0x12, 0x15, 0x32,
-	0x35, 0x52, 0x54, 0x72, 0x74, 0xb7, 0xbe, 0xc6,
-	0xc7, 0xc9, 0xd4, 0x00, 0x0b, 0x0f, 0xa9, 0xaa,
-	0x00, 0x0b, 0x10, 0x2a, 0x2f, 0x60, 0x64, 0x6a,
-	0x70, 0xd0, 0xeb, 0x00, 0x29, 0x2b, 0x00, 0x80,
-	0x00, 0x2a, 0x30, 0x3f, 0x40, 0x99, 0x9b, 0x00,
-	0xd0, 0x00, 0x00, 0xa4, 0x00, 0x00, 0x00, 0x1e,
-	0x1f, 0x00, 0x00, 0x10, 0x20, 0x24, 0x30, 0x70,
-	0xff, 0x00, 0x61, 0xe0, 0xe7, 0xf9, 0xfc,
-};
-
-static const signed char new_wtbl[] = {
-	0,   -1,    1,   -1,    1,    1,    0,    1,
-	0,    1,    1,    0,    1,    0,    1,    1,
-	0,    1,    0,    1,    0,    1,    0,    1,
-	0,    1,    0,    1,    1,    0,    1,    0,
-	1,    0,    1,    0,    1,    0,    1,    1,
-	0,    1,    0,    1,    0,    1,    0,    1,
-	1,    0,    1,    0,    1,    0,    1,    0,
-	1,    0,    1,    0,    1,    0,    1,    0,
-	1,    0,    1,    0,    1,    0,    1,    1,
-	0,    1,    0,    1,    0,    1,    0,    1,
-	0,    1,    0,    1,    0,    1,    0,    1,
-	0,    1,    0,    1,    0,    1,    1,    0,
-	1,    0,    1,    0,    1,    0,    1,    0,
-	1,    0,    1,    0,    1,    0,    1,    0,
-	1,    1,    0,    1,    0,    1,    0,    1,
-	0,    1,    0,    1,    0,    1,    0,    1,
-	1,    0,    1,    0,    1,    0,    1,    0,
-	1,    0,    1,    1,    0,    1,    0,    1,
-	0,    1,    0,    1,    0,    1,    0,    1,
-	0,    1,    1,    0,    1,    0,    1,    0,
-	1,    0,    1,    0,    1,    0,    1,    0,
-	1,    0,    1,    0,    1,    0,    1,    1,
-	0,    1,    0,    1,    0,    1,    0,    1,
-	0,    1,    2,    0,    1,    0,    1,    0,
-	1,    0,    1,    0,    1,    0,    1,    0,
-	1,    0,    1,    1,    0,    1,    0,    1,
-	1,    0,    1,    0,    1,    0,    1,    0,
-	1,    0,    1,    1,    2,    1,    1,    2,
-	2,    0,    2,    1,    2,    0,    2,    2,
-	1,    1,    2,    1,    1,    2,    1,    0,
-	1,    1,    0,    1,    0,    1,    2,    1,
-	0,    2,    1,    2,    1,    0,    1,
-};
-
-
 int wcswidth(const wchar_t *pwcs, size_t n)
 {
-	int h, l, m, count;
-	wchar_t wc;
-	unsigned char b;
+  int w, width = 0;
 
-	if (ENCODING == __ctype_encoding_7_bit) {
-		size_t i;
+  for (;*pwcs && n-- > 0; pwcs++)
+    if ((w = wcwidth(*pwcs)) < 0)
+      return -1;
+    else
+      width += w;
 
-		for (i = 0 ; (i < n) && pwcs[i] ; i++) {
-			if (pwcs[i] != (pwcs[i] & 0x7f)) {
-				return -1;
-			}
-		}
-	}
-#ifdef __CTYPE_HAS_8_BIT_LOCALES
-	else if (ENCODING == __ctype_encoding_8_bit) {
-		mbstate_t mbstate;
+  return width;
+}
 
-		mbstate.__mask = 0;			/* Initialize the mbstate. */
-		if (wcsnrtombs(NULL, &pwcs, n, SIZE_MAX, &mbstate) == ((size_t) - 1)) {
-			return -1;
-		}
-	}
-#endif /* __CTYPE_HAS_8_BIT_LOCALES */
-#if defined(__CTYPE_HAS_UTF_8_LOCALES) && defined(KUHN)
-	/* For stricter handling of allowed unicode values... see comments above. */
-	else if (ENCODING == __ctype_encoding_utf8) {
-		size_t i;
+#endif
+/**********************************************************************/
+#ifdef L_wcwidth
 
-		for (i = 0 ; (i < n) && pwcs[i] ; i++) {
-			if ( (((__uwchar_t)((pwcs[i]) - 0xfffeU)) < 2)
-				 || (((__uwchar_t)((pwcs[i]) - 0xd800U)) < (0xe000U - 0xd800U))
-				) {
-				return -1;
-			}
-		}
-	}
-#endif /* __CTYPE_HAS_UTF_8_LOCALES */
+/*
+ * This is an implementation of wcwidth() and wcswidth() (defined in
+ * IEEE Std 1002.1-2001) for Unicode.
+ *
+ * http://www.opengroup.org/onlinepubs/007904975/functions/wcwidth.html
+ * http://www.opengroup.org/onlinepubs/007904975/functions/wcswidth.html
+ *
+ * In fixed-width output devices, Latin characters all occupy a single
+ * "cell" position of equal width, whereas ideographic CJK characters
+ * occupy two such cells. Interoperability between terminal-line
+ * applications and (teletype-style) character terminals using the
+ * UTF-8 encoding requires agreement on which character should advance
+ * the cursor by how many cell positions. No established formal
+ * standards exist at present on which Unicode character shall occupy
+ * how many cell positions on character terminals. These routines are
+ * a first attempt of defining such behavior based on simple rules
+ * applied to data provided by the Unicode Consortium.
+ *
+ * For some graphical characters, the Unicode standard explicitly
+ * defines a character-cell width via the definition of the East Asian
+ * FullWidth (F), Wide (W), Half-width (H), and Narrow (Na) classes.
+ * In all these cases, there is no ambiguity about which width a
+ * terminal shall use. For characters in the East Asian Ambiguous (A)
+ * class, the width choice depends purely on a preference of backward
+ * compatibility with either historic CJK or Western practice.
+ * Choosing single-width for these characters is easy to justify as
+ * the appropriate long-term solution, as the CJK practice of
+ * displaying these characters as double-width comes from historic
+ * implementation simplicity (8-bit encoded characters were displayed
+ * single-width and 16-bit ones double-width, even for Greek,
+ * Cyrillic, etc.) and not any typographic considerations.
+ *
+ * Much less clear is the choice of width for the Not East Asian
+ * (Neutral) class. Existing practice does not dictate a width for any
+ * of these characters. It would nevertheless make sense
+ * typographically to allocate two character cells to characters such
+ * as for instance EM SPACE or VOLUME INTEGRAL, which cannot be
+ * represented adequately with a single-width glyph. The following
+ * routines at present merely assign a single-cell width to all
+ * neutral characters, in the interest of simplicity. This is not
+ * entirely satisfactory and should be reconsidered before
+ * establishing a formal standard in this area. At the moment, the
+ * decision which Not East Asian (Neutral) characters should be
+ * represented by double-width glyphs cannot yet be answered by
+ * applying a simple rule from the Unicode database content. Setting
+ * up a proper standard for the behavior of UTF-8 character terminals
+ * will require a careful analysis not only of each Unicode character,
+ * but also of each presentation form, something the author of these
+ * routines has avoided to do so far.
+ *
+ * http://www.unicode.org/unicode/reports/tr11/
+ *
+ * Markus Kuhn -- 2007-05-26 (Unicode 5.0)
+ *
+ * Permission to use, copy, modify, and distribute this software
+ * for any purpose and without fee is hereby granted. The author
+ * disclaims all warranties with regard to this software.
+ *
+ * Latest version: http://www.cl.cam.ac.uk/~mgk25/ucs/wcwidth.c
+ */
 
-	for (count = 0 ; n && (wc = *pwcs++) ; n--) {
-		if (wc <= 0xff) {
-			/* If we're here, wc != 0. */
-			if ((wc < 32) || ((wc >= 0x7f) && (wc < 0xa0))) {
-				return -1;
-			}
-			++count;
-			continue;
-		}
-		if (((unsigned int) wc) <= 0xffff) {
-			b = wc & 0xff;
-			h = (wc >> 8);
-			l = new_idx[h];
-			h = new_idx[h+1];
-			while ((m = (l+h) >> 1) != l) {
-				if (b >= new_tbl[m]) {
-					l = m;
-				} else {		/* wc < tbl[m] */
-					h = m;
-				}
-			}
-			count += new_wtbl[l]; /* none should be -1. */
-			continue;
-		}
+struct interval {
+  int first;
+  int last;
+};
 
-		/* Redo this to minimize average number of compares?*/
-		if (wc >= 0x1d167) {
-			if (wc <= 0x1d1ad) {
-				if ((wc <= 0x1d169
-					 || (wc >= 0x1d173
-						 && (wc <= 0x1d182
-							 || (wc >= 0x1d185
-								 && (wc <= 0x1d18b
-									 || (wc >= 0x1d1aa))))))
-					) {
-					continue;
-				}
-			} else if (((wc >= 0xe0020) && (wc <= 0xe007f)) || (wc == 0xe0001)) {
-				continue;
-			} else if ((wc >= 0x20000) && (wc <= 0x2ffff)) {
-				++count;		/* need 2.. add one here */
-			}
-#if (WCHAR_MAX > 0x7fffffffL)
-			else if (wc > 0x7fffffffL) {
-				return -1;
-			}
-#endif /* (WCHAR_MAX > 0x7fffffffL) */
-		}
+/* auxiliary function for binary search in interval table */
+static int bisearch(wchar_t ucs, const struct interval *table, int max) {
+  int min = 0;
+  int mid;
 
-		++count;
-	}
+  if (ucs < table[0].first || ucs > table[max].last)
+    return 0;
+  while (max >= min) {
+    mid = (min + max) / 2;
+    if (ucs > table[mid].last)
+      min = mid + 1;
+    else if (ucs < table[mid].first)
+      max = mid - 1;
+    else
+      return 1;
+  }
 
-	return count;
+  return 0;
 }
 
-#else  /*  __UCLIBC_HAS_LOCALE__ */
 
-int wcswidth(const wchar_t *pwcs, size_t n)
+/* The following two functions define the column width of an ISO 10646
+ * character as follows:
+ *
+ *    - The null character (U+0000) has a column width of 0.
+ *
+ *    - Other C0/C1 control characters and DEL will lead to a return
+ *      value of -1.
+ *
+ *    - Non-spacing and enclosing combining characters (general
+ *      category code Mn or Me in the Unicode database) have a
+ *      column width of 0.
+ *
+ *    - SOFT HYPHEN (U+00AD) has a column width of 1.
+ *
+ *    - Other format characters (general category code Cf in the Unicode
+ *      database) and ZERO WIDTH SPACE (U+200B) have a column width of 0.
+ *
+ *    - Hangul Jamo medial vowels and final consonants (U+1160-U+11FF)
+ *      have a column width of 0.
+ *
+ *    - Spacing characters in the East Asian Wide (W) or East Asian
+ *      Full-width (F) category as defined in Unicode Technical
+ *      Report #11 have a column width of 2.
+ *
+ *    - All remaining characters (including all printable
+ *      ISO 8859-1 and WGL4 characters, Unicode control characters,
+ *      etc.) have a column width of 1.
+ *
+ * This implementation assumes that wchar_t characters are encoded
+ * in ISO 10646.
+ */
+
+int wcwidth(wchar_t ucs)
 {
-	int count;
-	wchar_t wc;
-	size_t i;
+  /* sorted list of non-overlapping intervals of non-spacing characters */
+  /* generated by "uniset +cat=Me +cat=Mn +cat=Cf -00AD +1160-11FF +200B c" */
+  static const struct interval combining[] = {
+    { 0x0300, 0x036F }, { 0x0483, 0x0486 }, { 0x0488, 0x0489 },
+    { 0x0591, 0x05BD }, { 0x05BF, 0x05BF }, { 0x05C1, 0x05C2 },
+    { 0x05C4, 0x05C5 }, { 0x05C7, 0x05C7 }, { 0x0600, 0x0603 },
+    { 0x0610, 0x0615 }, { 0x064B, 0x065E }, { 0x0670, 0x0670 },
+    { 0x06D6, 0x06E4 }, { 0x06E7, 0x06E8 }, { 0x06EA, 0x06ED },
+    { 0x070F, 0x070F }, { 0x0711, 0x0711 }, { 0x0730, 0x074A },
+    { 0x07A6, 0x07B0 }, { 0x07EB, 0x07F3 }, { 0x0901, 0x0902 },
+    { 0x093C, 0x093C }, { 0x0941, 0x0948 }, { 0x094D, 0x094D },
+    { 0x0951, 0x0954 }, { 0x0962, 0x0963 }, { 0x0981, 0x0981 },
+    { 0x09BC, 0x09BC }, { 0x09C1, 0x09C4 }, { 0x09CD, 0x09CD },
+    { 0x09E2, 0x09E3 }, { 0x0A01, 0x0A02 }, { 0x0A3C, 0x0A3C },
+    { 0x0A41, 0x0A42 }, { 0x0A47, 0x0A48 }, { 0x0A4B, 0x0A4D },
+    { 0x0A70, 0x0A71 }, { 0x0A81, 0x0A82 }, { 0x0ABC, 0x0ABC },
+    { 0x0AC1, 0x0AC5 }, { 0x0AC7, 0x0AC8 }, { 0x0ACD, 0x0ACD },
+    { 0x0AE2, 0x0AE3 }, { 0x0B01, 0x0B01 }, { 0x0B3C, 0x0B3C },
+    { 0x0B3F, 0x0B3F }, { 0x0B41, 0x0B43 }, { 0x0B4D, 0x0B4D },
+    { 0x0B56, 0x0B56 }, { 0x0B82, 0x0B82 }, { 0x0BC0, 0x0BC0 },
+    { 0x0BCD, 0x0BCD }, { 0x0C3E, 0x0C40 }, { 0x0C46, 0x0C48 },
+    { 0x0C4A, 0x0C4D }, { 0x0C55, 0x0C56 }, { 0x0CBC, 0x0CBC },
+    { 0x0CBF, 0x0CBF }, { 0x0CC6, 0x0CC6 }, { 0x0CCC, 0x0CCD },
+    { 0x0CE2, 0x0CE3 }, { 0x0D41, 0x0D43 }, { 0x0D4D, 0x0D4D },
+    { 0x0DCA, 0x0DCA }, { 0x0DD2, 0x0DD4 }, { 0x0DD6, 0x0DD6 },
+    { 0x0E31, 0x0E31 }, { 0x0E34, 0x0E3A }, { 0x0E47, 0x0E4E },
+    { 0x0EB1, 0x0EB1 }, { 0x0EB4, 0x0EB9 }, { 0x0EBB, 0x0EBC },
+    { 0x0EC8, 0x0ECD }, { 0x0F18, 0x0F19 }, { 0x0F35, 0x0F35 },
+    { 0x0F37, 0x0F37 }, { 0x0F39, 0x0F39 }, { 0x0F71, 0x0F7E },
+    { 0x0F80, 0x0F84 }, { 0x0F86, 0x0F87 }, { 0x0F90, 0x0F97 },
+    { 0x0F99, 0x0FBC }, { 0x0FC6, 0x0FC6 }, { 0x102D, 0x1030 },
+    { 0x1032, 0x1032 }, { 0x1036, 0x1037 }, { 0x1039, 0x1039 },
+    { 0x1058, 0x1059 }, { 0x1160, 0x11FF }, { 0x135F, 0x135F },
+    { 0x1712, 0x1714 }, { 0x1732, 0x1734 }, { 0x1752, 0x1753 },
+    { 0x1772, 0x1773 }, { 0x17B4, 0x17B5 }, { 0x17B7, 0x17BD },
+    { 0x17C6, 0x17C6 }, { 0x17C9, 0x17D3 }, { 0x17DD, 0x17DD },
+    { 0x180B, 0x180D }, { 0x18A9, 0x18A9 }, { 0x1920, 0x1922 },
+    { 0x1927, 0x1928 }, { 0x1932, 0x1932 }, { 0x1939, 0x193B },
+    { 0x1A17, 0x1A18 }, { 0x1B00, 0x1B03 }, { 0x1B34, 0x1B34 },
+    { 0x1B36, 0x1B3A }, { 0x1B3C, 0x1B3C }, { 0x1B42, 0x1B42 },
+    { 0x1B6B, 0x1B73 }, { 0x1DC0, 0x1DCA }, { 0x1DFE, 0x1DFF },
+    { 0x200B, 0x200F }, { 0x202A, 0x202E }, { 0x2060, 0x2063 },
+    { 0x206A, 0x206F }, { 0x20D0, 0x20EF }, { 0x302A, 0x302F },
+    { 0x3099, 0x309A }, { 0xA806, 0xA806 }, { 0xA80B, 0xA80B },
+    { 0xA825, 0xA826 }, { 0xFB1E, 0xFB1E }, { 0xFE00, 0xFE0F },
+    { 0xFE20, 0xFE23 }, { 0xFEFF, 0xFEFF }, { 0xFFF9, 0xFFFB },
+    { 0x10A01, 0x10A03 }, { 0x10A05, 0x10A06 }, { 0x10A0C, 0x10A0F },
+    { 0x10A38, 0x10A3A }, { 0x10A3F, 0x10A3F }, { 0x1D167, 0x1D169 },
+    { 0x1D173, 0x1D182 }, { 0x1D185, 0x1D18B }, { 0x1D1AA, 0x1D1AD },
+    { 0x1D242, 0x1D244 }, { 0xE0001, 0xE0001 }, { 0xE0020, 0xE007F },
+    { 0xE0100, 0xE01EF }
+  };
 
-	for (i = 0 ; (i < n) && pwcs[i] ; i++) {
-		if (pwcs[i] != (pwcs[i] & 0x7f)) {
-			return -1;
-		}
-	}
+  /* test for 8-bit control characters */
+  if (ucs == 0)
+    return 0;
+  if (ucs < 32 || (ucs >= 0x7f && ucs < 0xa0))
+    return -1;
 
-	for (count = 0 ; n && (wc = *pwcs++) ; n--) {
-		if (wc <= 0xff) {
-			/* If we're here, wc != 0. */
-			if ((wc < 32) || ((wc >= 0x7f) && (wc < 0xa0))) {
-				return -1;
-			}
-			++count;
-			continue;
-		} else {
-			return -1;
-		}
-	}
+  /* binary search in table of non-spacing characters */
+  if (bisearch(ucs, combining,
+               sizeof(combining) / sizeof(struct interval) - 1))
+    return 0;
 
-	return count;
-}
+  /* if we arrive here, ucs is not a combining or C0/C1 control character */
 
-#endif /*  __UCLIBC_HAS_LOCALE__ */
-
-libc_hidden_def(wcswidth)
-
-#endif
-/**********************************************************************/
-#ifdef L_wcwidth
-
-
-int wcwidth(wchar_t wc)
-{
-	return wcswidth(&wc, 1);
+  return 1 + 
+    (ucs >= 0x1100 &&
+     (ucs <= 0x115f ||                    /* Hangul Jamo init. consonants */
+      ucs == 0x2329 || ucs == 0x232a ||
+      (ucs >= 0x2e80 && ucs <= 0xa4cf &&
+       ucs != 0x303f) ||                  /* CJK ... Yi */
+      (ucs >= 0xac00 && ucs <= 0xd7a3) || /* Hangul Syllables */
+      (ucs >= 0xf900 && ucs <= 0xfaff) || /* CJK Compatibility Ideographs */
+      (ucs >= 0xfe10 && ucs <= 0xfe19) || /* Vertical forms */
+      (ucs >= 0xfe30 && ucs <= 0xfe6f) || /* CJK Compatibility Forms */
+      (ucs >= 0xff00 && ucs <= 0xff60) || /* Fullwidth Forms */
+      (ucs >= 0xffe0 && ucs <= 0xffe6) ||
+      (ucs >= 0x20000 && ucs <= 0x2fffd) ||
+      (ucs >= 0x30000 && ucs <= 0x3fffd)));
 }
 
 #endif
