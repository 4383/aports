From: Rich Felker <dalias@aerifal.cx>

diff --git a/arch/arm/atomic.h b/arch/arm/atomic.h
index 734d287..ed1f467 100644
--- a/arch/arm/atomic.h
+++ b/arch/arm/atomic.h
@@ -22,7 +22,28 @@ static inline int a_ctz_64(uint64_t x)
 	return a_ctz_l(y);
 }
 
+#if __ARM_ARCH_6K__ || __ARM_ARCH_6ZK__ \
+ || __ARM_ARCH_7A__ || __ARM_ARCH_7R__ \
+ || __ARM_ARCH >= 6
+static inline int __k_cas(int t, int s, volatile int *p)
+{
+	int ret;
+	__asm__(
+		"	mcr p15,0,r0,c7,c10,5\n"
+		"1:	ldrex %0,[%3]\n"
+		"	subs %0,%0,%1\n"
+		"	strexeq %0,%2,[%3]\n"
+		"	teqeq %0,#1\n"
+		"	beq 1b\n"
+		"	mcr p15,0,r0,c7,c10,5\n"
+		: "=&r"(ret)
+		: "r"(t), "r"(s), "r"(p)
+		: "memory", "cc" );
+	return ret;
+}
+#else
 #define __k_cas ((int (*)(int, int, volatile int *))0xffff0fc0)
+#endif
 
 static inline int a_cas(volatile int *p, int t, int s)
 {
diff --git a/arch/arm/pthread_arch.h b/arch/arm/pthread_arch.h
index 43a1c01..ae3e80b 100644
--- a/arch/arm/pthread_arch.h
+++ b/arch/arm/pthread_arch.h
@@ -1,8 +1,22 @@
-typedef char *(*__ptr_func_t)(void) __attribute__((const));
+#if __ARM_ARCH_6K__ || __ARM_ARCH_6ZK__ \
+ || __ARM_ARCH_7A__ || __ARM_ARCH_7R__ \
+ || __ARM_ARCH >= 7
+
+static inline pthread_t __pthread_self()
+{
+	char *p;
+	__asm__( "mrc p15,0,%0,c13,c0,3" : "=r"(p) );
+	return (void *)(p+8-sizeof(struct pthread));
+}
+
+#else
 
+typedef char *(*__ptr_func_t)(void) __attribute__((const));
 #define __pthread_self() \
 	((pthread_t)(((__ptr_func_t)0xffff0fe0)()+8-sizeof(struct pthread)))
 
+#endif
+
 #define TLS_ABOVE_TP
 #define TP_ADJ(p) ((char *)(p) + sizeof(struct pthread) - 8)
 

