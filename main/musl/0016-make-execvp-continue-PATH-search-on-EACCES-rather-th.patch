From 14a0117117beed9d54d17819d9a9c3d4200c46ed Mon Sep 17 00:00:00 2001
From: Rich Felker <dalias@aerifal.cx>
Date: Tue, 3 Feb 2015 00:31:35 -0500
Subject: [PATCH] make execvp continue PATH search on EACCES rather than
 issuing an errror

the specification for execvp itself is unclear as to whether
encountering a file that cannot be executed due to EACCES during the
PATH search is a mandatory error condition; however, XBD 8.3's
specification of the PATH environment variable clarifies that the
search continues until a file with "appropriate execution permissions"
is found.

since it seems undesirable/erroneous to report ENOENT rather than
EACCES when an early path element has a non-executable file and all
later path elements lack any file by the requested name, the new code
stores a flag indicating that EACCES was seen and sets errno back to
EACCES in this case.
---
 src/process/execvp.c | 5 ++++-
 1 file changed, 4 insertions(+), 1 deletion(-)

diff --git a/src/process/execvp.c b/src/process/execvp.c
index 7d32200..3a8bbe8 100644
--- a/src/process/execvp.c
+++ b/src/process/execvp.c
@@ -11,6 +11,7 @@ int __execvpe(const char *file, char *const argv[], char *const envp[])
 {
 	const char *p, *z, *path = getenv("PATH");
 	size_t l, k;
+	int seen_eacces = 0;
 
 	errno = ENOENT;
 	if (!*file) return -1;
@@ -38,9 +39,11 @@ int __execvpe(const char *file, char *const argv[], char *const envp[])
 		b[z-p] = '/';
 		memcpy(b+(z-p)+(z>p), file, k+1);
 		execve(b, argv, envp);
-		if (errno != ENOENT) return -1;
+		if (errno == EACCES) seen_eacces = 1;
+		else if (errno != ENOENT) return -1;
 		if (!*z++) break;
 	}
+	if (seen_eacces) errno = EACCES;
 	return -1;
 }
 
-- 
2.3.3

